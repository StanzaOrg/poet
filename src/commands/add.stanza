defpackage poet/commands/add:
  import core
  import maybe-utils
  import poet/utils
  import poet/dependency
  import poet/config

public defn add (kind: String, dependency: String) -> False:
  defn error-incorrectly-formed () -> Void:
    error("incorrectly formatted dependency: `%_`" % [dependency])

  defn parse-git-dependency (full-locator: String) -> Dependency:
    split-last(full-locator, '/')
      $> value-or-else{_, error-incorrectly-formed}
      $> fn ([leading-url, name]):
        Dependency(GitLocator(full-locator), strip-end(name, ".git"))

  defn parse-path-dependency (path: String) -> Dependency:
    if not file-exists?(to-string("%_/poet.toml" % [path])):
      error("no `poet.toml` at path dependency `%_`" % [path])
    else:
      base-name?(path)
        $> value-or-else{_, error-incorrectly-formed}
        $> fn (dir):
          Dependency(PathLocator(path), dir)

  val current-dir = resolve-path!(".")
  val poet-toml-path = to-string("%_/poet.toml" % [current-dir])
  if not file-exists?(poet-toml-path):
    error("poet.toml doesn't exist, was the project initialized?")

  val dep = switch(kind):
    "--git": parse-git-dependency(dependency)
    "--path": parse-path-dependency(dependency)
    else: error("add: unknown argument `%_`" % [kind])

  within f = open(poet-toml-path, true):
    println(f, "%_ = \"%_\"" % [name(dep), location(dep)])
