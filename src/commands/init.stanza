defpackage poet/commands/init:
  import core
  import collections
  import poet/utils
  import toml/file
  import toml/value
  import toml/table

public defn init (project-dir*: String|False) -> False:
  ; First get the fully-resolved path of the directory where we're initializing
  ; a package. If no path was given, use the current directory.
  val project-dir = resolve-path! $
    match(project-dir*:String):
      project-dir*
    else:
      get-cwd()

  val project-name = unwrap(dirname(project-dir))

  val poet-toml-path = to-string("%_/poet.toml" % [project-dir])
  val poet-dir-path = to-string("%_/.poet/" % [project-dir])

  ; Check that a package wasn't already initialized
  for path in [poet-toml-path, poet-dir-path] do:
    if file-exists?(path):
      error("init: package already initialized (`%_` exists)" % [path])

  ; Create our initial package structure:
  ;   - .poet/
  ;     - pkgs/
  ;     - deps/
  ;     - stanza.proj
  ;   - .gitignore
  ;   - poet.toml
  ;   - stanza.proj
  ;   - src
  ;     - stanza.proj
  ;     - main.stanza
  create-dir(poet-dir-path)
  create-dir(to-string("%_/pkgs/" % [poet-dir-path]))
  create-dir(to-string("%_/deps/" % [poet-dir-path]))
  create-empty-file(to-string("%_/stanza.proj" % [poet-dir-path]))

  val git-ignore = to-string("%_/.gitignore" % [project-dir])
  within f = open(git-ignore, file-exists?(git-ignore)):
    println(f, ".poet")

  spit{poet-toml-path, _} $
    TomlFile $ [
      "name"    => project-name,
      "version" => "0.0.1",
      "dependencies" => TomlTable(),
    ]

  val stanza-proj-path = to-string("%_/stanza.proj" % [project-dir])
  if not file-exists?(stanza-proj-path):
    spit(stanza-proj-path, \<>include "src/stanza.proj"<>)

  val project-src-dir = to-string("%_/src/" % [project-dir])
  if not file-exists?(project-src-dir):
    create-dir(project-src-dir)

  val src-stanza-proj-path = to-string("%_/stanza.proj" % [project-src-dir])
  if not file-exists?(src-stanza-proj-path):
    spit{src-stanza-proj-path, _} $
      match(project-name:String):
        val main-package = to-string("%_/main" % [project-name])
        \<>package %_ defined-in "main.stanza"

build main:
  inputs: %_
  o: "%_"
<>
        % [main-package, main-package, project-name]
      else:
        ""

  val project-main-path = to-string("%_/main.stanza" % [project-src-dir])
  if not file-exists?(project-main-path):
    spit{project-main-path, _} $
      \<>defpackage %_/main:
  import core

defn main () -> False:
  println("Hello, world!")

main()
<>
      % [project-name]

  val git-dir = to-string("%_/.git" % [project-dir])
  if not file-exists?(git-dir):
    git-init(project-dir)

  false
