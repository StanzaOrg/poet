defpackage poet/dependency:
  import core
  import maybe-utils

  import poet/utils
  import poet/version

public defstruct Dependency:
  name: String
  uri: String
  version: Version

public defn path (dep: Dependency) -> String:
  to-string $ ".poet/deps/%_" % [name(dep)]

public defn spec (dep: Dependency) -> String:
  val version-string = version(dep)
    $> tag?
    $> map{_, fn (tag): tag[1 to false]} ; strip leading 'v'
    $> value-or{_, "latest"}

  to-string("%_|%_" % [name(dep), version-string])

public defn parse-dependency (name: String, locator: String) -> Maybe<Dependency>:
  val elements = to-tuple $ split(locator, "|")

  if length(elements) == 2:
    val uri = elements[0]
    val version-string = elements[1]
    val version = parse-version(version-string)
      $> value-or-else{_, fn ():
        error("build: dependency '%_' version '%_' is malformed."
               % [name, version-string])
      }
    One(Dependency(name, uri, version))
  else:
    None()
